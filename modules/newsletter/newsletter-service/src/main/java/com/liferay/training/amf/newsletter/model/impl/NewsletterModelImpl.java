/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.amf.newsletter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.liferay.training.amf.newsletter.model.Newsletter;
import com.liferay.training.amf.newsletter.model.NewsletterModel;
import com.liferay.training.amf.newsletter.model.NewsletterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Newsletter service. Represents a row in the &quot;Newsletter_Newsletter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NewsletterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsletterImpl
 * @see Newsletter
 * @see NewsletterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NewsletterModelImpl extends BaseModelImpl<Newsletter>
	implements NewsletterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a newsletter model instance should use the {@link Newsletter} interface instead.
	 */
	public static final String TABLE_NAME = "Newsletter_Newsletter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "newsletterId", Types.BIGINT },
			{ "articleId", Types.VARCHAR },
			{ "issueNumber", Types.INTEGER },
			{ "issueDate", Types.TIMESTAMP },
			{ "order_", Types.INTEGER },
			{ "isArticle", Types.BOOLEAN },
			{ "author", Types.VARCHAR },
			{ "mostRecent", Types.BOOLEAN },
			{ "stringDate", Types.VARCHAR },
			{ "month", Types.VARCHAR },
			{ "year", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newsletterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("issueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isArticle", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mostRecent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stringDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("month", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Newsletter_Newsletter (uuid_ VARCHAR(75) null,newsletterId LONG not null primary key,articleId VARCHAR(75) null,issueNumber INTEGER,issueDate DATE null,order_ INTEGER,isArticle BOOLEAN,author VARCHAR(75) null,mostRecent BOOLEAN,stringDate VARCHAR(75) null,month VARCHAR(75) null,year INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Newsletter_Newsletter";
	public static final String ORDER_BY_JPQL = " ORDER BY newsletter.order ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Newsletter_Newsletter.order_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.amf.newsletter.model.Newsletter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.amf.newsletter.model.Newsletter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.training.amf.newsletter.model.Newsletter"),
			true);
	public static final long ARTICLEID_COLUMN_BITMASK = 1L;
	public static final long ISARTICLE_COLUMN_BITMASK = 2L;
	public static final long ISSUEDATE_COLUMN_BITMASK = 4L;
	public static final long ISSUENUMBER_COLUMN_BITMASK = 8L;
	public static final long MOSTRECENT_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long ORDER_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Newsletter toModel(NewsletterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Newsletter model = new NewsletterImpl();

		model.setUuid(soapModel.getUuid());
		model.setNewsletterId(soapModel.getNewsletterId());
		model.setArticleId(soapModel.getArticleId());
		model.setIssueNumber(soapModel.getIssueNumber());
		model.setIssueDate(soapModel.getIssueDate());
		model.setOrder(soapModel.getOrder());
		model.setIsArticle(soapModel.isIsArticle());
		model.setAuthor(soapModel.getAuthor());
		model.setMostRecent(soapModel.isMostRecent());
		model.setStringDate(soapModel.getStringDate());
		model.setMonth(soapModel.getMonth());
		model.setYear(soapModel.getYear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Newsletter> toModels(NewsletterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Newsletter> models = new ArrayList<Newsletter>(soapModels.length);

		for (NewsletterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.training.amf.newsletter.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.amf.newsletter.model.Newsletter"));

	public NewsletterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newsletterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewsletterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newsletterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Newsletter.class;
	}

	@Override
	public String getModelClassName() {
		return Newsletter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("newsletterId", getNewsletterId());
		attributes.put("articleId", getArticleId());
		attributes.put("issueNumber", getIssueNumber());
		attributes.put("issueDate", getIssueDate());
		attributes.put("order", getOrder());
		attributes.put("isArticle", isIsArticle());
		attributes.put("author", getAuthor());
		attributes.put("mostRecent", isMostRecent());
		attributes.put("stringDate", getStringDate());
		attributes.put("month", getMonth());
		attributes.put("year", getYear());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long newsletterId = (Long)attributes.get("newsletterId");

		if (newsletterId != null) {
			setNewsletterId(newsletterId);
		}

		String articleId = (String)attributes.get("articleId");

		if (articleId != null) {
			setArticleId(articleId);
		}

		Integer issueNumber = (Integer)attributes.get("issueNumber");

		if (issueNumber != null) {
			setIssueNumber(issueNumber);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}

		Boolean isArticle = (Boolean)attributes.get("isArticle");

		if (isArticle != null) {
			setIsArticle(isArticle);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		Boolean mostRecent = (Boolean)attributes.get("mostRecent");

		if (mostRecent != null) {
			setMostRecent(mostRecent);
		}

		String stringDate = (String)attributes.get("stringDate");

		if (stringDate != null) {
			setStringDate(stringDate);
		}

		String month = (String)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getNewsletterId() {
		return _newsletterId;
	}

	@Override
	public void setNewsletterId(long newsletterId) {
		_newsletterId = newsletterId;
	}

	@JSON
	@Override
	public String getArticleId() {
		if (_articleId == null) {
			return "";
		}
		else {
			return _articleId;
		}
	}

	@Override
	public void setArticleId(String articleId) {
		_columnBitmask |= ARTICLEID_COLUMN_BITMASK;

		if (_originalArticleId == null) {
			_originalArticleId = _articleId;
		}

		_articleId = articleId;
	}

	public String getOriginalArticleId() {
		return GetterUtil.getString(_originalArticleId);
	}

	@JSON
	@Override
	public int getIssueNumber() {
		return _issueNumber;
	}

	@Override
	public void setIssueNumber(int issueNumber) {
		_columnBitmask |= ISSUENUMBER_COLUMN_BITMASK;

		if (!_setOriginalIssueNumber) {
			_setOriginalIssueNumber = true;

			_originalIssueNumber = _issueNumber;
		}

		_issueNumber = issueNumber;
	}

	public int getOriginalIssueNumber() {
		return _originalIssueNumber;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_columnBitmask |= ISSUEDATE_COLUMN_BITMASK;

		if (_originalIssueDate == null) {
			_originalIssueDate = _issueDate;
		}

		_issueDate = issueDate;
	}

	public Date getOriginalIssueDate() {
		return _originalIssueDate;
	}

	@JSON
	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		_columnBitmask = -1L;

		_order = order;
	}

	@JSON
	@Override
	public boolean getIsArticle() {
		return _isArticle;
	}

	@JSON
	@Override
	public boolean isIsArticle() {
		return _isArticle;
	}

	@Override
	public void setIsArticle(boolean isArticle) {
		_columnBitmask |= ISARTICLE_COLUMN_BITMASK;

		if (!_setOriginalIsArticle) {
			_setOriginalIsArticle = true;

			_originalIsArticle = _isArticle;
		}

		_isArticle = isArticle;
	}

	public boolean getOriginalIsArticle() {
		return _originalIsArticle;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public boolean getMostRecent() {
		return _mostRecent;
	}

	@JSON
	@Override
	public boolean isMostRecent() {
		return _mostRecent;
	}

	@Override
	public void setMostRecent(boolean mostRecent) {
		_columnBitmask |= MOSTRECENT_COLUMN_BITMASK;

		if (!_setOriginalMostRecent) {
			_setOriginalMostRecent = true;

			_originalMostRecent = _mostRecent;
		}

		_mostRecent = mostRecent;
	}

	public boolean getOriginalMostRecent() {
		return _originalMostRecent;
	}

	@JSON
	@Override
	public String getStringDate() {
		if (_stringDate == null) {
			return "";
		}
		else {
			return _stringDate;
		}
	}

	@Override
	public void setStringDate(String stringDate) {
		_stringDate = stringDate;
	}

	@JSON
	@Override
	public String getMonth() {
		if (_month == null) {
			return "";
		}
		else {
			return _month;
		}
	}

	@Override
	public void setMonth(String month) {
		_month = month;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_year = year;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Newsletter.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Newsletter toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Newsletter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsletterImpl newsletterImpl = new NewsletterImpl();

		newsletterImpl.setUuid(getUuid());
		newsletterImpl.setNewsletterId(getNewsletterId());
		newsletterImpl.setArticleId(getArticleId());
		newsletterImpl.setIssueNumber(getIssueNumber());
		newsletterImpl.setIssueDate(getIssueDate());
		newsletterImpl.setOrder(getOrder());
		newsletterImpl.setIsArticle(isIsArticle());
		newsletterImpl.setAuthor(getAuthor());
		newsletterImpl.setMostRecent(isMostRecent());
		newsletterImpl.setStringDate(getStringDate());
		newsletterImpl.setMonth(getMonth());
		newsletterImpl.setYear(getYear());

		newsletterImpl.resetOriginalValues();

		return newsletterImpl;
	}

	@Override
	public int compareTo(Newsletter newsletter) {
		int value = 0;

		if (getOrder() < newsletter.getOrder()) {
			value = -1;
		}
		else if (getOrder() > newsletter.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Newsletter)) {
			return false;
		}

		Newsletter newsletter = (Newsletter)obj;

		long primaryKey = newsletter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NewsletterModelImpl newsletterModelImpl = this;

		newsletterModelImpl._originalUuid = newsletterModelImpl._uuid;

		newsletterModelImpl._originalArticleId = newsletterModelImpl._articleId;

		newsletterModelImpl._originalIssueNumber = newsletterModelImpl._issueNumber;

		newsletterModelImpl._setOriginalIssueNumber = false;

		newsletterModelImpl._originalIssueDate = newsletterModelImpl._issueDate;

		newsletterModelImpl._originalIsArticle = newsletterModelImpl._isArticle;

		newsletterModelImpl._setOriginalIsArticle = false;

		newsletterModelImpl._originalMostRecent = newsletterModelImpl._mostRecent;

		newsletterModelImpl._setOriginalMostRecent = false;

		newsletterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Newsletter> toCacheModel() {
		NewsletterCacheModel newsletterCacheModel = new NewsletterCacheModel();

		newsletterCacheModel.uuid = getUuid();

		String uuid = newsletterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			newsletterCacheModel.uuid = null;
		}

		newsletterCacheModel.newsletterId = getNewsletterId();

		newsletterCacheModel.articleId = getArticleId();

		String articleId = newsletterCacheModel.articleId;

		if ((articleId != null) && (articleId.length() == 0)) {
			newsletterCacheModel.articleId = null;
		}

		newsletterCacheModel.issueNumber = getIssueNumber();

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			newsletterCacheModel.issueDate = issueDate.getTime();
		}
		else {
			newsletterCacheModel.issueDate = Long.MIN_VALUE;
		}

		newsletterCacheModel.order = getOrder();

		newsletterCacheModel.isArticle = isIsArticle();

		newsletterCacheModel.author = getAuthor();

		String author = newsletterCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			newsletterCacheModel.author = null;
		}

		newsletterCacheModel.mostRecent = isMostRecent();

		newsletterCacheModel.stringDate = getStringDate();

		String stringDate = newsletterCacheModel.stringDate;

		if ((stringDate != null) && (stringDate.length() == 0)) {
			newsletterCacheModel.stringDate = null;
		}

		newsletterCacheModel.month = getMonth();

		String month = newsletterCacheModel.month;

		if ((month != null) && (month.length() == 0)) {
			newsletterCacheModel.month = null;
		}

		newsletterCacheModel.year = getYear();

		return newsletterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", newsletterId=");
		sb.append(getNewsletterId());
		sb.append(", articleId=");
		sb.append(getArticleId());
		sb.append(", issueNumber=");
		sb.append(getIssueNumber());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append(", isArticle=");
		sb.append(isIsArticle());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", mostRecent=");
		sb.append(isMostRecent());
		sb.append(", stringDate=");
		sb.append(getStringDate());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", year=");
		sb.append(getYear());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.amf.newsletter.model.Newsletter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newsletterId</column-name><column-value><![CDATA[");
		sb.append(getNewsletterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleId</column-name><column-value><![CDATA[");
		sb.append(getArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueNumber</column-name><column-value><![CDATA[");
		sb.append(getIssueNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isArticle</column-name><column-value><![CDATA[");
		sb.append(isIsArticle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mostRecent</column-name><column-value><![CDATA[");
		sb.append(isMostRecent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stringDate</column-name><column-value><![CDATA[");
		sb.append(getStringDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Newsletter.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Newsletter.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _newsletterId;
	private String _articleId;
	private String _originalArticleId;
	private int _issueNumber;
	private int _originalIssueNumber;
	private boolean _setOriginalIssueNumber;
	private Date _issueDate;
	private Date _originalIssueDate;
	private int _order;
	private boolean _isArticle;
	private boolean _originalIsArticle;
	private boolean _setOriginalIsArticle;
	private String _author;
	private boolean _mostRecent;
	private boolean _originalMostRecent;
	private boolean _setOriginalMostRecent;
	private String _stringDate;
	private String _month;
	private int _year;
	private long _columnBitmask;
	private Newsletter _escapedModel;
}